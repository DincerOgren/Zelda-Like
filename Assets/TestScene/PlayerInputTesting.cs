//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/TestScene/PlayerInputTesting.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputTesting: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputTesting()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputTesting"",
    ""maps"": [
        {
            ""name"": ""CharacterMovement"",
            ""id"": ""45c0d008-e08b-4305-93db-0f5aaa08fd2a"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""62827ef5-3e4e-432a-946a-e9101917a1f3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""64fc27b3-fe40-4176-ad50-8ffa12bf7c6e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run Button"",
                    ""type"": ""Button"",
                    ""id"": ""640a8326-e67e-404a-8d89-f5ff16e40d19"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse Look"",
                    ""type"": ""Value"",
                    ""id"": ""81aa5059-7174-4718-a110-1ea76d48af73"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Camra Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""e599a754-aade-4c8f-b3a3-e5bac85cc27b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""Invert,Clamp(min=-0.1,max=0.1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DashButton"",
                    ""type"": ""Button"",
                    ""id"": ""9952a8cb-a6f6-44dc-84f3-c72a6f2b7bd3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch Button"",
                    ""type"": ""Button"",
                    ""id"": ""2d926d4b-66fc-47de-8ed1-1edaae5094ef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""02a68aa0-558d-4958-a157-9e72c5394f4f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a78e5688-6de4-4bfd-923a-224cf2b7e0e2"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""9ea8ce36-26dc-43f2-9244-32cad1d6846f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2d73bb42-5887-46c3-ad65-50a26ebec002"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d9aa23f6-5656-4117-a4ef-66d2d30201ad"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5248bd12-6bf3-4b73-b59f-8a7127fcea59"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""dd88c1ec-dbf1-4b27-aa8d-24b3bcd848f0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3d8857d1-24f0-4e4c-9dad-788bd3292caf"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""137c9916-d7d9-4f01-ba63-967f531026d5"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camra Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3367fe2f-237c-4909-aa7a-612a712c3ac5"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DashButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55a8d663-ce3a-4f90-a59c-3d59eec0165c"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InventoryUIKeys"",
            ""id"": ""b7f34942-1f20-4903-a0a4-13249520f309"",
            ""actions"": [
                {
                    ""name"": ""Tab Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""4f246631-3fb1-4f8b-a3d0-bd562270149c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon UI"",
                    ""type"": ""Button"",
                    ""id"": ""88328bb3-f6dc-4c2f-88f7-2a46e2c12f22"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8265db64-4a68-418a-a878-45975e6ac815"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tab Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3edc9681-8215-4026-ae55-95926cf39052"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon UI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CharacterMovement
        m_CharacterMovement = asset.FindActionMap("CharacterMovement", throwIfNotFound: true);
        m_CharacterMovement_Move = m_CharacterMovement.FindAction("Move", throwIfNotFound: true);
        m_CharacterMovement_Jump = m_CharacterMovement.FindAction("Jump", throwIfNotFound: true);
        m_CharacterMovement_RunButton = m_CharacterMovement.FindAction("Run Button", throwIfNotFound: true);
        m_CharacterMovement_MouseLook = m_CharacterMovement.FindAction("Mouse Look", throwIfNotFound: true);
        m_CharacterMovement_CamraZoom = m_CharacterMovement.FindAction("Camra Zoom", throwIfNotFound: true);
        m_CharacterMovement_DashButton = m_CharacterMovement.FindAction("DashButton", throwIfNotFound: true);
        m_CharacterMovement_CrouchButton = m_CharacterMovement.FindAction("Crouch Button", throwIfNotFound: true);
        // InventoryUIKeys
        m_InventoryUIKeys = asset.FindActionMap("InventoryUIKeys", throwIfNotFound: true);
        m_InventoryUIKeys_TabInventory = m_InventoryUIKeys.FindAction("Tab Inventory", throwIfNotFound: true);
        m_InventoryUIKeys_WeaponUI = m_InventoryUIKeys.FindAction("Weapon UI", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharacterMovement
    private readonly InputActionMap m_CharacterMovement;
    private List<ICharacterMovementActions> m_CharacterMovementActionsCallbackInterfaces = new List<ICharacterMovementActions>();
    private readonly InputAction m_CharacterMovement_Move;
    private readonly InputAction m_CharacterMovement_Jump;
    private readonly InputAction m_CharacterMovement_RunButton;
    private readonly InputAction m_CharacterMovement_MouseLook;
    private readonly InputAction m_CharacterMovement_CamraZoom;
    private readonly InputAction m_CharacterMovement_DashButton;
    private readonly InputAction m_CharacterMovement_CrouchButton;
    public struct CharacterMovementActions
    {
        private @PlayerInputTesting m_Wrapper;
        public CharacterMovementActions(@PlayerInputTesting wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_CharacterMovement_Move;
        public InputAction @Jump => m_Wrapper.m_CharacterMovement_Jump;
        public InputAction @RunButton => m_Wrapper.m_CharacterMovement_RunButton;
        public InputAction @MouseLook => m_Wrapper.m_CharacterMovement_MouseLook;
        public InputAction @CamraZoom => m_Wrapper.m_CharacterMovement_CamraZoom;
        public InputAction @DashButton => m_Wrapper.m_CharacterMovement_DashButton;
        public InputAction @CrouchButton => m_Wrapper.m_CharacterMovement_CrouchButton;
        public InputActionMap Get() { return m_Wrapper.m_CharacterMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterMovementActions set) { return set.Get(); }
        public void AddCallbacks(ICharacterMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterMovementActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @RunButton.started += instance.OnRunButton;
            @RunButton.performed += instance.OnRunButton;
            @RunButton.canceled += instance.OnRunButton;
            @MouseLook.started += instance.OnMouseLook;
            @MouseLook.performed += instance.OnMouseLook;
            @MouseLook.canceled += instance.OnMouseLook;
            @CamraZoom.started += instance.OnCamraZoom;
            @CamraZoom.performed += instance.OnCamraZoom;
            @CamraZoom.canceled += instance.OnCamraZoom;
            @DashButton.started += instance.OnDashButton;
            @DashButton.performed += instance.OnDashButton;
            @DashButton.canceled += instance.OnDashButton;
            @CrouchButton.started += instance.OnCrouchButton;
            @CrouchButton.performed += instance.OnCrouchButton;
            @CrouchButton.canceled += instance.OnCrouchButton;
        }

        private void UnregisterCallbacks(ICharacterMovementActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @RunButton.started -= instance.OnRunButton;
            @RunButton.performed -= instance.OnRunButton;
            @RunButton.canceled -= instance.OnRunButton;
            @MouseLook.started -= instance.OnMouseLook;
            @MouseLook.performed -= instance.OnMouseLook;
            @MouseLook.canceled -= instance.OnMouseLook;
            @CamraZoom.started -= instance.OnCamraZoom;
            @CamraZoom.performed -= instance.OnCamraZoom;
            @CamraZoom.canceled -= instance.OnCamraZoom;
            @DashButton.started -= instance.OnDashButton;
            @DashButton.performed -= instance.OnDashButton;
            @DashButton.canceled -= instance.OnDashButton;
            @CrouchButton.started -= instance.OnCrouchButton;
            @CrouchButton.performed -= instance.OnCrouchButton;
            @CrouchButton.canceled -= instance.OnCrouchButton;
        }

        public void RemoveCallbacks(ICharacterMovementActions instance)
        {
            if (m_Wrapper.m_CharacterMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharacterMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharacterMovementActions @CharacterMovement => new CharacterMovementActions(this);

    // InventoryUIKeys
    private readonly InputActionMap m_InventoryUIKeys;
    private List<IInventoryUIKeysActions> m_InventoryUIKeysActionsCallbackInterfaces = new List<IInventoryUIKeysActions>();
    private readonly InputAction m_InventoryUIKeys_TabInventory;
    private readonly InputAction m_InventoryUIKeys_WeaponUI;
    public struct InventoryUIKeysActions
    {
        private @PlayerInputTesting m_Wrapper;
        public InventoryUIKeysActions(@PlayerInputTesting wrapper) { m_Wrapper = wrapper; }
        public InputAction @TabInventory => m_Wrapper.m_InventoryUIKeys_TabInventory;
        public InputAction @WeaponUI => m_Wrapper.m_InventoryUIKeys_WeaponUI;
        public InputActionMap Get() { return m_Wrapper.m_InventoryUIKeys; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InventoryUIKeysActions set) { return set.Get(); }
        public void AddCallbacks(IInventoryUIKeysActions instance)
        {
            if (instance == null || m_Wrapper.m_InventoryUIKeysActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InventoryUIKeysActionsCallbackInterfaces.Add(instance);
            @TabInventory.started += instance.OnTabInventory;
            @TabInventory.performed += instance.OnTabInventory;
            @TabInventory.canceled += instance.OnTabInventory;
            @WeaponUI.started += instance.OnWeaponUI;
            @WeaponUI.performed += instance.OnWeaponUI;
            @WeaponUI.canceled += instance.OnWeaponUI;
        }

        private void UnregisterCallbacks(IInventoryUIKeysActions instance)
        {
            @TabInventory.started -= instance.OnTabInventory;
            @TabInventory.performed -= instance.OnTabInventory;
            @TabInventory.canceled -= instance.OnTabInventory;
            @WeaponUI.started -= instance.OnWeaponUI;
            @WeaponUI.performed -= instance.OnWeaponUI;
            @WeaponUI.canceled -= instance.OnWeaponUI;
        }

        public void RemoveCallbacks(IInventoryUIKeysActions instance)
        {
            if (m_Wrapper.m_InventoryUIKeysActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInventoryUIKeysActions instance)
        {
            foreach (var item in m_Wrapper.m_InventoryUIKeysActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InventoryUIKeysActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InventoryUIKeysActions @InventoryUIKeys => new InventoryUIKeysActions(this);
    public interface ICharacterMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRunButton(InputAction.CallbackContext context);
        void OnMouseLook(InputAction.CallbackContext context);
        void OnCamraZoom(InputAction.CallbackContext context);
        void OnDashButton(InputAction.CallbackContext context);
        void OnCrouchButton(InputAction.CallbackContext context);
    }
    public interface IInventoryUIKeysActions
    {
        void OnTabInventory(InputAction.CallbackContext context);
        void OnWeaponUI(InputAction.CallbackContext context);
    }
}
